{"version":3,"sources":["Components/Nav.js","Components/Landing.js","Components/Body.js","App.js","serviceWorker.js","index.js","images/myAvatar.png"],"names":["Navy","className","class","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","tabindex","aria-disabled","Landing","src","Avatar","Body","Card","body","inverse","color","CardTitle","CardText","Button","style","backgroundColor","borderColor","CardImg","top","width","alt","App","Nav","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"sMAiCeA,G,KA7BF,WACX,OACE,yBAAKC,UAAU,eACb,yBAAKC,MAAM,kDACf,uBAAGA,MAAM,eAAeC,KAAK,KAA7B,UACA,4BAAQD,MAAM,iBAAiBE,KAAK,SAASC,cAAY,WAAWC,cAAY,aAAaC,gBAAc,YAAYC,gBAAc,QAAQC,aAAW,qBACtJ,0BAAMP,MAAM,yBAEd,yBAAKA,MAAM,2BAA2BQ,GAAG,aACvC,wBAAIR,MAAM,cACR,wBAAIA,MAAM,mBACR,uBAAGA,MAAM,WAAWC,KAAK,KAAzB,QAAkC,0BAAMD,MAAM,WAAZ,eAEpC,wBAAIA,MAAM,YACR,uBAAGA,MAAM,WAAWC,KAAK,KAAzB,aAEF,wBAAID,MAAM,YACR,uBAAGA,MAAM,WAAWC,KAAK,KAAzB,YAEF,wBAAID,MAAM,YACR,uBAAGA,MAAM,oBAAoBC,KAAK,IAAIQ,SAAS,KAAKC,gBAAc,QAAlE,mB,gBCjBO,SAASC,IAGtB,OACI,yBAAKZ,UAAU,eACf,yBAAKA,UAAU,gBACf,yBAAKa,IAAKC,MACb,mFACA,uBAAGZ,KAAK,WACR,4BAAQC,KAAK,SAASF,MAAM,mBAA5B,2C,4CC6BYc,EArCF,WACT,OACI,yBAAKf,UAAU,kBACX,yBAAKA,UAAU,UAEf,yBAAKA,UAAU,QACf,kBAACgB,EAAA,EAAD,CAAMC,MAAI,EAACC,SAAO,EAACC,MAAM,WAC7B,kBAACC,EAAA,EAAD,iBACA,kBAACC,EAAA,EAAD,+EACA,kBAACC,EAAA,EAAD,CAAQH,MAAM,aAAd,YAGI,yBAAKnB,UAAU,QACf,kBAACgB,EAAA,EAAD,CAAMC,MAAI,EAACC,SAAO,EAACC,MAAM,QAC7B,kBAACC,EAAA,EAAD,gCACA,kBAACC,EAAA,EAAD,+EACA,kBAACC,EAAA,EAAD,CAAQH,MAAM,aAAd,YAII,yBAAKnB,UAAU,QACrB,kBAACgB,EAAA,EAAD,CAAMC,MAAI,EAACC,SAAO,EAACK,MAAO,CAAEC,gBAAiB,OAAQC,YAAa,SAClE,kBAACC,EAAA,EAAD,CAASC,KAAG,EAACC,MAAM,OAAOf,IAAKC,IAAQe,IAAI,mBACzC,kBAACT,EAAA,EAAD,gCACA,kBAACC,EAAA,EAAD,+EACA,kBAACC,EAAA,EAAD,kBAKI,yBAAKtB,UAAU,SAASS,GAAG,aCvBxBqB,EAVH,WACR,OACI,6BACI,kBAACC,EAAD,MACA,kBAACnB,EAAD,MACA,kBAAC,EAAD,QCEQoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBEzI5BC,EAAOC,QAAU,IAA0B,sC","file":"static/js/main.1f38367f.chunk.js","sourcesContent":["import React from 'react'\r\nimport '../Styles/App.css'\r\n\r\n\r\nconst Navy = () => {\r\n  return(\r\n    <div className='navbar-main'>\r\n      <nav class=\"navbar navbar-expand-lg navbar-dark bg-primary\">\r\n  <a class=\"navbar-brand\" href=\"#\">Navbar</a>\r\n  <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n    <span class=\"navbar-toggler-icon\"></span>\r\n  </button>\r\n  <div class=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n    <ul class=\"navbar-nav\">\r\n      <li class=\"nav-item active\">\r\n        <a class=\"nav-link\" href=\"#\">Home <span class=\"sr-only\">(current)</span></a>\r\n      </li>\r\n      <li class=\"nav-item\">\r\n        <a class=\"nav-link\" href=\"#\">Features</a>\r\n      </li>\r\n      <li class=\"nav-item\">\r\n        <a class=\"nav-link\" href=\"#\">Pricing</a>\r\n      </li>\r\n      <li class=\"nav-item\">\r\n        <a class=\"nav-link disabled\" href=\"#\" tabindex=\"-1\" aria-disabled=\"true\">Disabled</a>\r\n      </li>\r\n    </ul>\r\n  </div>\r\n</nav>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Navy","import React from 'react';\r\n\r\n\r\nimport '../Styles/App.css'\r\nimport Avatar from '../images/myAvatar.png'\r\n\r\n\r\nexport default function Landing() {\r\n  \r\n\r\n  return (\r\n      <div className='landing-div'>\r\n      <div className='landing-card'>\r\n      <img src={Avatar}></img>\r\n   <p>Hello, welcome to my personal website and portfolio!</p>\r\n   <a href='#body-2'>\r\n   <button type=\"button\" class=\"btn btn-primary\">Click here to find out more about me</button>\r\n</a>\r\n   </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react'\r\nimport '../Styles/App.css'\r\nimport {\r\n    Card, CardImg, CardText, CardBody,\r\n    CardTitle, CardSubtitle, Button\r\n  } from 'reactstrap';\r\nimport Avatar from '../images/myAvatar.png'\r\n\r\nconst Body = () => {\r\n    return(\r\n        <div className='body-container'>\r\n            <div className='body-1'>\r\n            \r\n            <div className='card'>\r\n            <Card body inverse color=\"success\">\r\n        <CardTitle>Designer</CardTitle>\r\n        <CardText>With supporting text below as a natural lead-in to additional content.</CardText>\r\n        <Button color=\"secondary\">Button</Button>\r\n      </Card>\r\n</div>\r\n            <div className='card'>  \r\n            <Card body inverse color=\"info\">\r\n        <CardTitle>Special Title Treatment</CardTitle>\r\n        <CardText>With supporting text below as a natural lead-in to additional content.</CardText>\r\n        <Button color=\"secondary\">Button</Button>\r\n      </Card>\r\n      </div>\r\n\r\n            <div className='card'>\r\n      <Card body inverse style={{ backgroundColor: '#333', borderColor: '#333' }}>\r\n      <CardImg top width=\"100%\" src={Avatar} alt=\"Card image cap\" />\r\n        <CardTitle>Special Title Treatment</CardTitle>\r\n        <CardText>With supporting text below as a natural lead-in to additional content.</CardText>\r\n        <Button>Button</Button>\r\n      </Card>\r\n      </div>\r\n            </div>\r\n\r\n            <div className='body-2' id='body-2'>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Body","import React from 'react'\r\nimport Nav from './Components/Nav'\r\nimport Landing from './Components/Landing'\r\nimport Body from './Components/Body'\r\n\r\nconst App = () => {\r\n    return(\r\n        <div>\r\n            <Nav/>\r\n            <Landing />\r\n            <Body />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/myAvatar.d48da99d.png\";"],"sourceRoot":""}